#![allow(dead_code)]
#![allow(unused_variables)]

use chrono::DateTime;
use chrono::FixedOffset;
use chrono::NaiveDateTime;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum UserConsentStatus {
    ACTIVE,
    PENDING,
    REVOKED,
    PAUSED,
    REJECTED,
    EXPIRED,
}

#[derive(Debug, Clone)]
pub enum FISessionStatus {
    ACTIVE,
    COMPLETED,
    EXPIRED,
    FAILED,
}

/// fetch status of the Financial Information
#[derive(Debug, Clone)]
pub enum AccountFIStatus {
    READY,
    DENIED,
    PENDING,
    DELIVERED,
    TIMEOUT,
}

#[derive(Debug, Clone)]
pub enum TimestampFormat {
    /// RFC 3339 date-and-time string
    FixedOffset(DateTime<FixedOffset>),
    Naive(NaiveDateTime),
}

#[derive(Debug, Clone)]
pub struct Timestamp {
    pub val: String,
    pub rep: TimestampFormat,
}

impl Timestamp {
    pub fn from_str(s: &str) -> Result<Timestamp, bool> {
        if let Ok(dt) = DateTime::<FixedOffset>::parse_from_rfc3339(s) {
            return Ok(Timestamp {
                val: s.to_owned(),
                rep: TimestampFormat::FixedOffset(dt),
            });
        } else if let Ok(dt) = DateTime::<FixedOffset>::parse_from_rfc2822(s) {
            return Ok(Timestamp {
                val: s.to_owned(),
                rep: TimestampFormat::FixedOffset(dt),
            });
        } else if let Ok(dt) = NaiveDateTime::parse_from_str(s, "%Y-%m-%dT%H:%M:%S") {
            return Ok(Timestamp {
                val: s.to_owned(),
                rep: TimestampFormat::Naive(dt),
            });
        } else if let Ok(dt) = NaiveDateTime::parse_from_str(s, "%Y-%m-%dT%H:%M:%S%.f %Z") {
            return Ok(Timestamp {
                val: s.to_owned(),
                rep: TimestampFormat::Naive(dt),
            });
        } else if let Ok(dt) = NaiveDateTime::parse_from_str(s, "%Y-%m-%d %H:%M:%S%.f %Z") {
            return Ok(Timestamp {
                val: s.to_owned(),
                rep: TimestampFormat::Naive(dt),
            });
        }
        Err(false)
    }
}

#[derive(Debug, Clone)]
pub struct TxId {
    pub val: String,
}

impl TxId {
    pub fn from_uuid(s: &str) -> Result<TxId, bool> {
        match Uuid::parse_str(s) {
            Ok(_uuid) => Ok(TxId {
                val: s.to_lowercase(),
            }),
            _ => Err(false),
        }
    }
    #[allow(dead_code)]
    pub fn from_ascii(s: &str) -> Result<TxId, bool> {
        if s.is_ascii() {
            Ok(TxId {
                val: s.to_lowercase(),
            })
        } else {
            Err(false)
        }
    }
}

#[derive(Debug, Clone)]
pub struct ConsentHandle {
    pub val: String,
}
#[derive(Debug, Clone)]
pub struct ConsentId {
    pub val: String,
}

/// (mandatory)
#[derive(Debug, Clone)]
pub struct UserConsent {
    /// Unique ID generated by AA after consent approval is given by the customer.
    pub id: Option<ConsentId>,
    /// Unique ID generated by AA after receiving the consent request.
    /// Consent Handle can be used by FIU/AA Client to check the consent status and
    /// also to retrieve the consent ID once consent is approved by the customer.
    pub handle: Option<ConsentHandle>,
    /// (required) status of consent artefact
    pub status: UserConsentStatus,
}

/// https://api.rebit.org.in/viewSpec/FIU_2_0_0.yaml
pub mod fiu {
    use super::AccountFIStatus;
    use super::FISessionStatus;
    use super::Timestamp;
    use super::TxId;
    use super::UserConsent;

    #[derive(Debug, Clone)]
    pub struct ConsentStatusNotification {
        /// (required) API version = 2.0.0
        pub ver: String,
        /// (required) creation timestamp of the message
        pub timestamp: Timestamp,
        /// unique transaction identifier used for providing end-to-end traceability.
        pub txid: TxId,
        /// (required)
        pub notifer: Notifier,
        /// (required)
        pub consent: UserConsent,
    }

    #[derive(Debug, Clone)]
    pub struct Notifier {
        /// (required) type of the notifier entity; example: AA
        pub typ: String,
        /// (required) unique ID to identify the entity
        pub id: String,
    }

    #[derive(Debug, Clone)]
    pub struct Account {
        /// reference number assigned by FIP as part of the account linking process
        pub link_refnum: String,
        /// fetch status of the Financial Information.
        pub fi_status: AccountFIStatus,
        pub desc: String,
    }

    #[derive(Debug, Clone)]
    pub struct FIStatusResponse {
        /// FIP ID as defined in the account aggregator ecosystem
        pub fip_id: String,
        pub accounts: Vec<Account>,
    }

    // Contains the financial information fetch session id and session status details
    #[derive(Debug, Clone)]
    pub struct FISessionStatusResponse {
        /// (required) type of the notifier entity; example: AA
        pub session_id: String,
        /// (required) unique ID to identify the entity
        pub session_status: FISessionStatus,
        pub fi_status_response: Vec<FIStatusResponse>,
    }

    #[derive(Debug, Clone)]
    pub struct FIStatusNotification {
        /// (required) API version = 2.0.0
        pub ver: String,
        /// (required) creation timestamp of the message
        pub timestamp: Timestamp,
        /// unique transaction identifier used for providing end-to-end traceability.
        pub txid: TxId,
        /// (required)
        pub notifer: Notifier,
        /// (required)
        pub status_response: FISessionStatusResponse,
    }

    trait ConsentNotification {
        /// This API is intended to be used by AA to notify FIU about the change in consent status
        /// due to the consent management operations performed by the Customer.
        /// POST .../Consent/Notification
        fn update_consent_status();
        /// This API can be used by AAs to send notifications related to Financial Information (FI) fetch to FIU/AA Client.
        /// POST .../FI/Notification
        fn update_fi_status();
    }
}

/// https://api.rebit.org.in/viewSpec/FIP_2_0_0.yaml
pub mod fip {
    trait AccountDiscoveryFlow {
        /// This API enables an AA to discover accounts belonging to a customer based on the customer identifiers.
        /// A list of masked account information and corresponding linkRefNumber for each discovered account
        /// is returned based on the identifier matching logic at FIP.
        /// POST .../Accounts/discover
        fn discover_account();
    }
    trait AccountLinkingFlow {
        /// This API will be used for initiating an account link request to link selected account/s with the AA customer address.
        /// POST .../Accounts/link
        fn link_account();
        /// This API will be used to delete a previously established account link to the user's profile.
        /// Once deleted, the financial information can not be retrieved for that account through Account Aggregator.
        /// POST .../Accounts/delink
        fn delink_account();
        /// This API is used to submit the token/OTP(received from the customer) back to FIP so that
        /// account linkage can be completed. It is used only in case of token-based authentication for linking accounts.
        /// POST .../Accounts/link/verify
        fn verify_account();
    }
    trait DataFlow {
        /// This API is used by the AA to request for financial information from the FIP.
        /// The FIP will validate the request against the signed consent and
        /// return a sessionID which can then be used by the AA to fetch the required data.
        /// POST .../FI/request
        fn request_fi();
        /// This API is used to fetch financial information from FIP once AA recieves the data ready notification.
        /// POST ../FI/fetch
        fn fetch_fi();
    }
    trait ConsentFlow {
        /// This API will be used by the AA to send the consent artefact to the FIP on creation.
        /// POST .../Consent
        fn create_consent_artefact();
        /// This API is intended to be used by AA to notify the change in consent status due to
        /// the consent management operations performed by the customer.
        /// POST ../Consent/Notification
        fn update_consent_status();
    }
    /// This API can be used by FIPs and FIUs to check availability of AA Application.
    trait Monitor {
        /// GET .../Heartbeat
        fn heartbeat();
    }
}

/// https://api.rebit.org.in/viewSpec/AA_2_0_0.yaml
pub mod aa {
    trait ConsentFlow {
        /// This API is intended for AA Client to request generation of digitally signed consent artefacts.
        /// The customer has to use the AA application to select accounts and approve consent generation.
        /// Once the customer approves the consent request on the AA application,
        /// AA generates the digitally signed consent artefacts.
        /// Note - The AA Client never sees the account of the customer or directly participates in consent generation.
        /// POST .../Consent
        fn create_consent_artefact();
        /// This API is intended to be used by FIU/AA Client to check the consent status and
        /// retrieve the consent ID from AA once the consent is approved by customer.
        /// POST .../Consent/handle
        fn check_consent_status();
        /// This API is intended for fetching the information associated with the specific consent.
        /// POST .../Consent/fetch
        fn fetch_consent();
        /// This API can be used by AA Client, FIU and FIP to place a request for consent status
        /// update to AA in specific use cases. For more details, please refer FAQ section.
        /// POST .../Consent/Notification
        fn update_consent_status();
    }
    trait DataFlow {
        /// This API is used by the FIU to request for financial information from the AA.
        /// The AA will validate the request against the signed consent and
        /// return a sessionID which can then be used by the FIU to fetch the required data.
        /// POST .../FI/request
        fn request_fi();
        /// This API is used to fetch financial information from AA once FIU recieves the data ready notification.
        /// POST .../FI/fetch
        fn fetch_fi();
        /// This API can be used by AA Client, FIU and FIP to send notifications
        /// related to Financial Information (FI) fetch to AA.
        /// POST .../FI/Notification
        fn update_fi_status();
    }

    trait AccountLinkingFlow {
        /// This API can be used by FIP to send account linking related notifications
        /// to AA in case of direct authentication method of account linking.
        /// POST .../Account/link/Notification
        fn update_account_linking_status();
    }
    /// This API can be used by FIPs and FIUs to check availability of AA Application.
    trait Monitor {
        /// GET .../Heartbeat
        fn heartbeat();
    }
}
